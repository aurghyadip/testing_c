        -:    0:Source:dfs.c
        -:    0:Graph:dfs.gcno
        -:    0:Data:dfs.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3: 
        -:    4:struct node
        -:    5:{
        -:    6:    int a;
        -:    7:    struct node *left;
        -:    8:    struct node *right;
        -:    9:    int visited;
        -:   10:};
        -:   11: 
        -:   12:void generate(struct node **, int);
        -:   13:void DFS(struct node *);
        -:   14:void delete(struct node **);
        -:   15: 
function main called 1 returned 100% blocks executed 100%
        1:   16:int main()
        -:   17:{
        1:   18:    struct node *head = NULL;
        1:   19:    int choice = 0, num, flag = 0, key;
        -:   20: 
        -:   21:    do
        -:   22:    {
        6:   23:        printf("\nEnter your choice:\n1. Insert\n2. Perform DFS Traversal\n3. Exit\nChoice: ");
call    0 returned 100%
        6:   24:        scanf("%d", &choice);
call    0 returned 100%
        6:   25:        switch(choice)
branch  0 taken 50%
branch  1 taken 17%
branch  2 taken 17%
branch  3 taken 17%
        -:   26:        {
        -:   27:        case 1: 
        3:   28:            printf("Enter element to insert: ");
call    0 returned 100%
        3:   29:            scanf("%d", &num);
call    0 returned 100%
        3:   30:            generate(&head, num);
call    0 returned 100%
        3:   31:            break;
        -:   32:        case 2: 
        1:   33:            DFS(head);
call    0 returned 100%
        1:   34:            break;
        -:   35:        case 3: 
        1:   36:            delete(&head);
call    0 returned 100%
        1:   37:            printf("Memory Cleared\nPROGRAM TERMINATED\n");
call    0 returned 100%
        1:   38:            break;
        -:   39:        default: 
        1:   40:            printf("Not a valid input, try again\n");
call    0 returned 100%
        -:   41:        }
        6:   42:    } while (choice != 3);
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   43: 
        1:   44:    return 0;
        -:   45:}
        -:   46: 
function generate called 3 returned 100% blocks executed 100%
        3:   47:void generate(struct node **head, int num)
        -:   48:{
        3:   49:    struct node *temp = *head, *prev = *head;
        -:   50: 
        3:   51:    if (*head == NULL)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   52:    {
        1:   53:        *head = (struct node *)malloc(sizeof(struct node));
        1:   54:        (*head)->a = num;
        1:   55:        (*head)->visited = 0;
        1:   56:        (*head)->left = (*head)->right = NULL;
        -:   57:    }
        -:   58:    else
        -:   59:    {
        6:   60:        while (temp != NULL)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   61:        {
        2:   62:            if (num > temp->a)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   63:            {
        1:   64:                prev = temp;
        1:   65:                temp = temp->right;
        -:   66:            }
        -:   67:            else
        -:   68:            {
        1:   69:                prev = temp;
        1:   70:                temp = temp->left;
        -:   71:            }
        -:   72:        }
        2:   73:        temp = (struct node *)malloc(sizeof(struct node));
        2:   74:        temp->a = num;
        2:   75:        temp->visited = 0;
        2:   76:        if (temp->a >= prev->a)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   77:        {
        1:   78:            prev->right = temp;
        -:   79:        }
        -:   80:        else
        -:   81:        {
        1:   82:            prev->left = temp;
        -:   83:        }
        -:   84:    }
        3:   85:}
        -:   86: 
function DFS called 1 returned 100% blocks executed 100%
        1:   87:void DFS(struct node *head)
        -:   88:{
        1:   89:    struct node *temp = head, *prev;
        -:   90: 
        1:   91:    printf("On DFS traversal we get:\n");
call    0 returned 100%
        7:   92:    while (temp && !temp->visited)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 83%
branch  3 taken 17% (fallthrough)
        -:   93:    {
        5:   94:        if (temp->left && !temp->left->visited)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        -:   95:        {
        1:   96:            temp = temp->left;
        -:   97:        }
        4:   98:        else if (temp->right && !temp->right->visited)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        -:   99:        {
        1:  100:            temp = temp->right;
        -:  101:        }
        -:  102:        else
        -:  103:        {
        3:  104:            printf("%d  ", temp->a);
call    0 returned 100%
        3:  105:            temp->visited = 1;
        3:  106:            temp = head;
        -:  107:        }
        -:  108:    }
        1:  109:}
        -:  110: 
function delete called 3 returned 100% blocks executed 100%
        3:  111:void delete(struct node **head)
        -:  112:{
        3:  113:    if (*head != NULL)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  114:    {
        3:  115:        if ((*head)->left)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  116:        {
        1:  117:            delete(&(*head)->left);
call    0 returned 100%
        -:  118:        }
        3:  119:        if ((*head)->right)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  120:        {
        1:  121:            delete(&(*head)->right);
call    0 returned 100%
        -:  122:        }
        3:  123:        free(*head);
        -:  124:    }
        3:  125:}
